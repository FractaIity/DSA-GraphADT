#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Graph\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=Graph()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Graph\r\n\ Creates\ new\ arraylists\ of\ Vertex\ and\ Edge\ classes\ and\ inserts\ them\ into\ vertices\ and\ edges\r\n
comment10.params=v
comment10.target=java.util.ArrayList\ incidentEdges(Vertex)
comment10.text=\r\n\ Finds\ and\ returns\ the\ set\ of\ edges\ that\ are\ incident\ to\ a\ given\ vertex.\r\n\ @param\ v\ the\ vertex\r\n\ @return\ a\ list\ of\ edges\r\n
comment11.params=v\ n
comment11.target=java.lang.String\ rename(Vertex,\ java.lang.String)
comment11.text=\r\n\ Rename\ vertex\ v\ as\ n;\ returns\ the\ old\ vertex\ name\r\n\ @param\ v\ a\ vertex\r\n\ @param\ n\ the\ new\ name\r\n\ @return\ the\ old\ edge\ name\r\n
comment12.params=e\ n
comment12.target=java.lang.String\ rename(Edge,\ java.lang.String)
comment12.text=\r\n\ Rename\ edge\ e\ as\ n;\ returns\ the\ old\ edge\ name\r\n\ @param\ e\ an\ edge\r\n\ @param\ n\ the\ new\ name\r\n\ @return\ the\ old\ edge\ name\r\n
comment13.params=v
comment13.target=void\ bftraverse(Vertex)
comment13.text=\r\n\ Performs\ a\ breadth-first\ traversal\ of\ the\ rail\ network\r\n
comment2.params=stationName
comment2.target=Vertex\ insertVertex(java.lang.String)
comment2.text=\r\n\ Insert\ a\ new\ vertex\ with\ name\ n\ into\ the\ graph.\ Return\ the\ new\ vertex\ object\r\n\ @param\ stationName\ String\r\n\ @return\ the\ new\ Vertex\r\n
comment3.params=v
comment3.target=java.lang.String\ removeVertex(Vertex)
comment3.text=\r\n\ Remove\ the\ given\ vertex\ from\ the\ graph.\ The\ name\ of\ the\ vertex\ is\ returned,\ or\ null\ if\ the\ \r\n\ graph\ does\ not\ contain\ the\ vertex.\r\n\ @param\ v\ Vertex\r\n\ @return\ the\ name\ of\ the\ vertex\ or\ null.\r\n
comment4.params=v\ w\ trainline
comment4.target=Edge\ insertEdge(Vertex,\ Vertex,\ java.lang.String)
comment4.text=\r\n\ Build\ a\ new\ edge\ with\ end\ vertices\ v\ and\ w\ and\ name\ n\ and\ insert\ into\ the\ graph.\ Return\ the\ new\ Edge\ object.\r\n\ NB\:\ The\ vertices\ u\ and\ v\ must\ already\ be\ in\ the\ graph.\r\n\ @param\ v\ Vertex\r\n\ @param\ w\ Vertex\r\n\ @param\ n\ String\r\n\ @return\ the\ new\ Edge\r\n
comment5.params=e
comment5.target=java.lang.String\ removeEdge(Edge)
comment5.text=\r\n\ Remove\ the\ edge\ e\ from\ the\ graph.\ The\ name\ of\ the\ edge\ is\ returned\ (or\ null\ if\ the\ edge\ is\ not\r\n\ in\ the\ graph).\r\n\ @param\ e\ the\ edge\ to\ be\ removed\r\n\ @return\ the\ name\ or\ null\ if\ e\ does\ not\ exist\r\n
comment6.params=e\ v
comment6.target=Vertex\ opposite(Edge,\ Vertex)
comment6.text=\r\n\ Return\ the\ endpoint\ vertex\ of\ edge\ e\ that\ is\ 'opposite'\ its\ other\ endpoint\ vertex\ v.\ Return\ null\ if\ e\ \r\n\ does\ not\ exist\ or\ does\ not\ have\ endpoint\ v\r\n\ @param\ e\ Edge\r\n\ @param\ v\ Vertex\r\n\ @return\ a\ vertex\ or\ null\r\n
comment7.params=
comment7.target=java.util.ArrayList\ vertices()
comment7.text=\r\n\ Return\ a\ collection\ containing\ of\ all\ of\ the\ vertices\ in\ the\ graph.\r\n\ @return\ a\ list\ of\ vertices\r\n
comment8.params=
comment8.target=java.util.ArrayList\ edges()
comment8.text=\r\n\ Return\ a\ collection\ of\ all\ of\ the\ edges\ in\ the\ graph.\r\n\ @return\ a\ list\ of\ edges\r\n
comment9.params=v\ w
comment9.target=boolean\ areAdjacent(Vertex,\ Vertex)
comment9.text=\r\n\ Checks\ whether\ two\ vertices\ are\ adjacent\ (i.e.\ joined\ by\ a\ single\ edge)\ or\ not.\r\n\ @param\ v\ a\ vertex\r\n\ @param\ w\ a\ vertex\r\n\ @return\ true\ if\ v\ and\ we\ are\ adjacent\ and\ false\ otherwise.\r\n\ \r\n
numComments=14
